<?php
/**
 * Criado através de FileTemplate por Kevin.
 */
#parse("PHP File Header.php")
#set( $CONTRA_BARRA = "\" )

namespace App\Services;

use App\Models$CONTRA_BARRA${MODEL};
use App\Validators$CONTRA_BARRA${MODEL}Rules;
#if (${IS_AUTH} == "TRUE" || ${IS_AUTH} == "true" || ${IS_AUTH} == "1")
use Illuminate\Http\Response;
#end
use Illuminate\Support\Collection;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;

/**
 * Class ${MODEL}Service
 * @package App\Services
 */
class ${NAME} extends BaseService
{
    public \$relations;

    public \$relationsCount;

    /**
     * ${MODEL}Service constructor.
     */
    public function __construct()
    {
        \$this->relations = [];
        \$this->relationsCount = [];
    }


    /**
     * Listagem de ${MODEL}
     * @param Collection \$filters
     * @return ${MODEL}[]|\Illuminate\Contracts\Pagination\LengthAwarePaginator
     * @throws Exception
     */
    public function index(Collection \$filters = null)
    {
        if(!\$filters){
            \$filters = collect();
        }

        \$query = ${MODEL}::with(\$this->relations);

        \$order = \$filters->get('desc', false) ? 'desc' : 'asc';

        \$sortBy = \$filters->get('sort', 'id');

        \$limit = \$filters->get('limit', 15);

        \$query->orderBy(\$sortBy, \$order);

        return \$limit > 0 ? \$query->paginate(\$limit) : \$query->get();
    }

    /**
     * Visualizar ${MODEL} pelo id
     * @param int|${MODEL} \$model
     * @return ${MODEL}
     * @throws ModelNotFoundException
     */
    public function show(\$model) : ${MODEL}
    {
        if(!\$model instanceof ${MODEL}){
            \$model = ${MODEL}::whereId(\$model)->firstOrFail();
        }

        return \$model->load(\$this->relations);
    }

    /**
     * Criar ${MODEL}
     * @param Collection \$data
     * @return ${MODEL}
     * @throws Exception
     */
    public function store(Collection \$data) : ${MODEL}
    {
        \$this->validateWithArray(\$data->toArray(), ${MODEL}Rules::store());

        \$model = ${MODEL}::create(\$data->all());

        return \$this->show(\$model);
    }


    /**
     * Atualizar ${MODEL}
     * @param Collection \$data
     * @param int|${MODEL} \$id
     * @throws ModelNotFoundException
     * @throws Exception
     * @return ${MODEL}
     */
    public function update(Collection \$data, \$id) : ${MODEL}
    {
        \$this->validateWithArray(\$data->toArray(), ${MODEL}Rules::update());

        \$model = \$this->show(\$id);

        \$model->update(\$data->all());

        return \$this->show(\$model);
    }

    /**
     * Deletar ${MODEL}
     * @param int|${MODEL} \$id
     * @return ${MODEL}
     * @throws ModelNotFoundException
     * @throws Exception
     */
    public function delete(\$id) : ${MODEL}
    {
        \$model = \$this->show(\$id);

        \$model->delete();

        return \$model;
    }
#if (${IS_AUTH} == "TRUE" || ${IS_AUTH} == "true" || ${IS_AUTH} == "1")
    /**
     * @param Collection \$data
     * @return ${MODEL}
     * @throws Exception
     * @throws \Throwable
     */
    public function login(Collection \$data): ${MODEL}
    {
        \$this->validateWithArray(\$data, ${MODEL}Rules::login());
#if (${WITH_FACEBOOK} == "TRUE" || ${WITH_FACEBOOK} == "true" || ${WITH_FACEBOOK} == "1")
        if (\$facebook_id = \$data->get('facebook_id')) {
            \$model = ${MODEL}::whereFacebookId(\$facebook_id)->first();

            return \$model;
        }
#end
        \$model = ${MODEL}::whereEmail(\$data->get('email'))->first();

        throw_if(
            !\$model->checkSenha(\$data->get('senha')),
            \Exception::class,
            'Senha inválida',
            Response::HTTP_UNAUTHORIZED
        );

        return \$model;
    }
#end
}
